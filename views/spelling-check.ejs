<!-- 맞춤법 검사 섹션 -->
<div class="max-w-4xl mx-auto px-4 py-6">
  <h1 class="text-2xl font-bold text-gray-900 mb-6">맞춤법 검사</h1>

  <div class="bg-white shadow rounded-lg p-6">
    <!-- 텍스트 입력 섹션 -->
    <div class="mb-6">
      <label class="block text-sm font-medium text-gray-700 mb-2">
        검사할 내용을 입력하세요
      </label>
      <textarea
        id="text-input"
        rows="10"
        class="shadow-sm focus:ring-blue-500 focus:border-blue-500 mt-1 block w-full sm:text-sm border border-gray-300 rounded-md p-2"
        placeholder="맞춤법을 검사할 텍스트를 입력하세요..."
      ></textarea>
    </div>

    <!-- 검사 버튼 -->
    <div class="flex justify-end">
      <button
        type="button"
        id="check-button"
        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      >
        맞춤법 검사하기
      </button>
    </div>
  </div>

  <!-- 결과 섹션 -->
  <div id="result-section" class="mt-6 bg-white shadow rounded-lg p-6 hidden">
    <h2 class="text-lg font-medium text-gray-900 mb-4">검사 결과</h2>
    <div id="result-content" class="prose max-w-none">
      <!-- 결과가 여기에 표시됩니다 -->
    </div>
  </div>
</div>

<script>
  document
    .getElementById("check-button")
    .addEventListener("click", async () => {
      const textInput = document.getElementById("text-input").value;
      const resultSection = document.getElementById("result-section");
      const resultContent = document.getElementById("result-content");

      if (!textInput.trim()) {
        alert("검사할 텍스트를 입력해주세요.");
        return;
      }

      // 로딩 상태 표시
      resultContent.innerHTML =
        '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> 맞춤법 검사중...</div>';
      resultSection.classList.remove("hidden");

      try {
        // 실제 API 호출 대신 setTimeout으로 지연 시간 추가 (API 호출 시뮬레이션)
        await new Promise((resolve) => setTimeout(resolve, 1500));

        // 모의 API 응답 데이터
        const mockResponse = {
          success: true,
          corrections: [
            {
              original: "됬어요",
              corrected: "됐어요",
              explanation: "'되었어요'의 준말은 '됐어요'입니다.",
            },
            {
              original: "할수있어요",
              corrected: "할 수 있어요",
              explanation: "'할 수 있어요'는 띄어 써야 합니다.",
            },
            {
              original: "외않되",
              corrected: "왜 안 돼",
              explanation: "'왜 안 돼'가 올바른 표현입니다.",
            },
          ],
        };

        // 입력된 텍스트에서 교정이 필요한 부분 찾기
        let modifiedText = textInput;
        mockResponse.corrections.forEach((correction) => {
          modifiedText = modifiedText.replace(
            new RegExp(correction.original, "g"),
            `<div class="mb-4">
                    <span class="text-red-500">${correction.original}</span> → 
                    <span class="text-green-500">${correction.corrected}</span>
                    <p class="text-sm text-gray-500 mt-1">${correction.explanation}</p>
                </div>`
          );
        });

        resultContent.innerHTML = modifiedText;
      } catch (error) {
        resultContent.innerHTML = `
            <div class="text-red-500">
                맞춤법 검사 중 오류가 발생했습니다. 다시 시도해주세요.
            </div>
        `;
      }
    });
</script>
